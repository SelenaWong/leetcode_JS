/**
 * 1023. Video Stitching
 * @param {number[][]} clips
 * @param {number} T
 * @return {number}
 */
var videoStitching = function (clips, T) {
    let res = 0;
    clips.sort(function (a, b) {
        return a[0] - b[0];
    });
    console.log(clips);
    let curend = 0, maxend = 0; // 当前能到最远点
    
    for (let i = 0; i < clips.length; ) {
        if (clips[i][0] > curend) { // 比当前能到最远点还大的起点, 最远点到起点的距离覆盖不了
            return -1;
        }
        while (i < clips.length && clips[i][0] <= curend) { // 一开始当前最远点肯定是0, 等于把开头为0的都来一遍, 取一个最大的
            maxend = Math.max(maxend, clips[i][1]);
            i++;
        }
        res++;
        curend = maxend; // 把最远点更新为0为开头最大的
        if (curend >= T) {
            return res;
        }
    }
    return -1;
};
let clips = [[24, 28], [10, 56], [50, 78], [38, 77], [38, 78], [3, 69], [33, 49], [66, 89], [73, 83], [6, 12], [24, 86], [67, 82], [18, 26], [1, 57], [13, 30], [8, 56], [58, 78], [2, 84], [35, 39], [45, 51], [30, 32], [19, 31], [32, 70], [1, 15], [16, 18], [32, 87], [32, 87], [39, 42], [81, 84], [25, 61], [26, 34], [10, 82], [17, 34], [56, 72], [17, 22], [8, 83], [5, 21], [3, 79], [12, 73], [0, 28], [74, 76], [41, 79], [4, 60], [51, 90], [10, 41], [47, 90], [44, 56], [13, 16], [43, 83], [0, 22], [30, 40], [8, 27], [57, 58], [0, 26], [16, 66], [62, 89], [2, 74], [17, 61], [25, 28], [23, 54], [42, 79], [14, 28], [26, 77], [34, 36], [17, 42], [72, 81], [12, 87], [3, 57], [81, 88], [65, 87], [35, 74], [19, 77], [10, 53], [38, 75], [14, 90], [10, 90], [57, 62], [37, 74], [24, 80], [52, 63], [52, 55], [64, 73], [45, 79], [12, 19], [26, 38], [40, 81], [28, 48], [33, 62], [18, 50], [9, 40]]
let T = 72;
console.log(videoStitching(clips, T));